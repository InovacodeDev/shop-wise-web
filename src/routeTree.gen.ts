/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteRouteImport } from './routes/signup/route'
import { Route as SettingsRouteRouteImport } from './routes/settings/route'
import { Route as ScanRouteRouteImport } from './routes/scan/route'
import { Route as LoginRouteRouteImport } from './routes/login/route'
import { Route as ListRouteRouteImport } from './routes/list/route'
import { Route as HomeRouteRouteImport } from './routes/home/route'
import { Route as ForgotPasswordRouteRouteImport } from './routes/forgot-password/route'
import { Route as FamilyRouteRouteImport } from './routes/family/route'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminUsersRouteRouteImport } from './routes/admin/users/route'
import { Route as AdminSettingsRouteRouteImport } from './routes/admin/settings/route'
import { Route as AdminSecurityRouteRouteImport } from './routes/admin/security/route'
import { Route as AdminReportsRouteRouteImport } from './routes/admin/reports/route'
import { Route as AdminNotificationsRouteRouteImport } from './routes/admin/notifications/route'
import { Route as AdminMarketInsightsRouteRouteImport } from './routes/admin/market-insights/route'
import { Route as AdminLogsRouteRouteImport } from './routes/admin/logs/route'
import { Route as AdminAuditRouteRouteImport } from './routes/admin/audit/route'

const SignupRouteRoute = SignupRouteRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRouteRoute = SettingsRouteRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ScanRouteRoute = ScanRouteRouteImport.update({
  id: '/scan',
  path: '/scan',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRouteRoute = LoginRouteRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ListRouteRoute = ListRouteRouteImport.update({
  id: '/list',
  path: '/list',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRouteRoute = HomeRouteRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const ForgotPasswordRouteRoute = ForgotPasswordRouteRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const FamilyRouteRoute = FamilyRouteRouteImport.update({
  id: '/family',
  path: '/family',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUsersRouteRoute = AdminUsersRouteRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminSettingsRouteRoute = AdminSettingsRouteRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminSecurityRouteRoute = AdminSecurityRouteRouteImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminReportsRouteRoute = AdminReportsRouteRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminNotificationsRouteRoute = AdminNotificationsRouteRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminMarketInsightsRouteRoute =
  AdminMarketInsightsRouteRouteImport.update({
    id: '/market-insights',
    path: '/market-insights',
    getParentRoute: () => AdminRouteRoute,
  } as any)
const AdminLogsRouteRoute = AdminLogsRouteRouteImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminAuditRouteRoute = AdminAuditRouteRouteImport.update({
  id: '/audit',
  path: '/audit',
  getParentRoute: () => AdminRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/family': typeof FamilyRouteRoute
  '/forgot-password': typeof ForgotPasswordRouteRoute
  '/home': typeof HomeRouteRoute
  '/list': typeof ListRouteRoute
  '/login': typeof LoginRouteRoute
  '/scan': typeof ScanRouteRoute
  '/settings': typeof SettingsRouteRoute
  '/signup': typeof SignupRouteRoute
  '/admin/audit': typeof AdminAuditRouteRoute
  '/admin/logs': typeof AdminLogsRouteRoute
  '/admin/market-insights': typeof AdminMarketInsightsRouteRoute
  '/admin/notifications': typeof AdminNotificationsRouteRoute
  '/admin/reports': typeof AdminReportsRouteRoute
  '/admin/security': typeof AdminSecurityRouteRoute
  '/admin/settings': typeof AdminSettingsRouteRoute
  '/admin/users': typeof AdminUsersRouteRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/family': typeof FamilyRouteRoute
  '/forgot-password': typeof ForgotPasswordRouteRoute
  '/home': typeof HomeRouteRoute
  '/list': typeof ListRouteRoute
  '/login': typeof LoginRouteRoute
  '/scan': typeof ScanRouteRoute
  '/settings': typeof SettingsRouteRoute
  '/signup': typeof SignupRouteRoute
  '/admin/audit': typeof AdminAuditRouteRoute
  '/admin/logs': typeof AdminLogsRouteRoute
  '/admin/market-insights': typeof AdminMarketInsightsRouteRoute
  '/admin/notifications': typeof AdminNotificationsRouteRoute
  '/admin/reports': typeof AdminReportsRouteRoute
  '/admin/security': typeof AdminSecurityRouteRoute
  '/admin/settings': typeof AdminSettingsRouteRoute
  '/admin/users': typeof AdminUsersRouteRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/family': typeof FamilyRouteRoute
  '/forgot-password': typeof ForgotPasswordRouteRoute
  '/home': typeof HomeRouteRoute
  '/list': typeof ListRouteRoute
  '/login': typeof LoginRouteRoute
  '/scan': typeof ScanRouteRoute
  '/settings': typeof SettingsRouteRoute
  '/signup': typeof SignupRouteRoute
  '/admin/audit': typeof AdminAuditRouteRoute
  '/admin/logs': typeof AdminLogsRouteRoute
  '/admin/market-insights': typeof AdminMarketInsightsRouteRoute
  '/admin/notifications': typeof AdminNotificationsRouteRoute
  '/admin/reports': typeof AdminReportsRouteRoute
  '/admin/security': typeof AdminSecurityRouteRoute
  '/admin/settings': typeof AdminSettingsRouteRoute
  '/admin/users': typeof AdminUsersRouteRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/family'
    | '/forgot-password'
    | '/home'
    | '/list'
    | '/login'
    | '/scan'
    | '/settings'
    | '/signup'
    | '/admin/audit'
    | '/admin/logs'
    | '/admin/market-insights'
    | '/admin/notifications'
    | '/admin/reports'
    | '/admin/security'
    | '/admin/settings'
    | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/family'
    | '/forgot-password'
    | '/home'
    | '/list'
    | '/login'
    | '/scan'
    | '/settings'
    | '/signup'
    | '/admin/audit'
    | '/admin/logs'
    | '/admin/market-insights'
    | '/admin/notifications'
    | '/admin/reports'
    | '/admin/security'
    | '/admin/settings'
    | '/admin/users'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/family'
    | '/forgot-password'
    | '/home'
    | '/list'
    | '/login'
    | '/scan'
    | '/settings'
    | '/signup'
    | '/admin/audit'
    | '/admin/logs'
    | '/admin/market-insights'
    | '/admin/notifications'
    | '/admin/reports'
    | '/admin/security'
    | '/admin/settings'
    | '/admin/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  FamilyRouteRoute: typeof FamilyRouteRoute
  ForgotPasswordRouteRoute: typeof ForgotPasswordRouteRoute
  HomeRouteRoute: typeof HomeRouteRoute
  ListRouteRoute: typeof ListRouteRoute
  LoginRouteRoute: typeof LoginRouteRoute
  ScanRouteRoute: typeof ScanRouteRoute
  SettingsRouteRoute: typeof SettingsRouteRoute
  SignupRouteRoute: typeof SignupRouteRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/scan': {
      id: '/scan'
      path: '/scan'
      fullPath: '/scan'
      preLoaderRoute: typeof ScanRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/list': {
      id: '/list'
      path: '/list'
      fullPath: '/list'
      preLoaderRoute: typeof ListRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/family': {
      id: '/family'
      path: '/family'
      fullPath: '/family'
      preLoaderRoute: typeof FamilyRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/settings': {
      id: '/admin/settings'
      path: '/settings'
      fullPath: '/admin/settings'
      preLoaderRoute: typeof AdminSettingsRouteRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/security': {
      id: '/admin/security'
      path: '/security'
      fullPath: '/admin/security'
      preLoaderRoute: typeof AdminSecurityRouteRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/reports': {
      id: '/admin/reports'
      path: '/reports'
      fullPath: '/admin/reports'
      preLoaderRoute: typeof AdminReportsRouteRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/notifications': {
      id: '/admin/notifications'
      path: '/notifications'
      fullPath: '/admin/notifications'
      preLoaderRoute: typeof AdminNotificationsRouteRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/market-insights': {
      id: '/admin/market-insights'
      path: '/market-insights'
      fullPath: '/admin/market-insights'
      preLoaderRoute: typeof AdminMarketInsightsRouteRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/logs': {
      id: '/admin/logs'
      path: '/logs'
      fullPath: '/admin/logs'
      preLoaderRoute: typeof AdminLogsRouteRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/audit': {
      id: '/admin/audit'
      path: '/audit'
      fullPath: '/admin/audit'
      preLoaderRoute: typeof AdminAuditRouteRouteImport
      parentRoute: typeof AdminRouteRoute
    }
  }
}

interface AdminRouteRouteChildren {
  AdminAuditRouteRoute: typeof AdminAuditRouteRoute
  AdminLogsRouteRoute: typeof AdminLogsRouteRoute
  AdminMarketInsightsRouteRoute: typeof AdminMarketInsightsRouteRoute
  AdminNotificationsRouteRoute: typeof AdminNotificationsRouteRoute
  AdminReportsRouteRoute: typeof AdminReportsRouteRoute
  AdminSecurityRouteRoute: typeof AdminSecurityRouteRoute
  AdminSettingsRouteRoute: typeof AdminSettingsRouteRoute
  AdminUsersRouteRoute: typeof AdminUsersRouteRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminAuditRouteRoute: AdminAuditRouteRoute,
  AdminLogsRouteRoute: AdminLogsRouteRoute,
  AdminMarketInsightsRouteRoute: AdminMarketInsightsRouteRoute,
  AdminNotificationsRouteRoute: AdminNotificationsRouteRoute,
  AdminReportsRouteRoute: AdminReportsRouteRoute,
  AdminSecurityRouteRoute: AdminSecurityRouteRoute,
  AdminSettingsRouteRoute: AdminSettingsRouteRoute,
  AdminUsersRouteRoute: AdminUsersRouteRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  FamilyRouteRoute: FamilyRouteRoute,
  ForgotPasswordRouteRoute: ForgotPasswordRouteRoute,
  HomeRouteRoute: HomeRouteRoute,
  ListRouteRoute: ListRouteRoute,
  LoginRouteRoute: LoginRouteRoute,
  ScanRouteRoute: ScanRouteRoute,
  SettingsRouteRoute: SettingsRouteRoute,
  SignupRouteRoute: SignupRouteRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
